ô(
NC:\Users\manoj\documents\CSharpLearninProjects\LinkedLists\SingleLinkedList.cs
	namespace 	'
DataStructuresAndAlgorithms
 %
{ 
public 

class 
SingleLinkedList !
{ 
public 
Node 
Head 
{ 
get 
; 
set  #
;# $
}% &
public 
void 
	AddToLast 
( 
int !
value" '
)' (
{		 	
var 
node 
= 
new 
Node 
(  
value  %
)% &
;& '
if 
( 
Head 
== 
null 
) 
{ 
Head 
= 
node 
; 
return 
; 
} 
var 
current 
= 
Head 
; 
while 
( 
current 
. 
Next 
!=  "
null# '
)' (
{ 
current 
= 
current !
.! "
Next" &
;& '
} 
current 
. 
Next 
= 
node 
;  
} 	
public 
void 

AddToFirst 
( 
Node #
node$ (
)( )
{ 	
if 
( 
Head 
== 
null 
) 
{ 
Head   
=   
node   
;   
return!! 
;!! 
}"" 
node$$ 
.$$ 
Next$$ 
=$$ 
Head$$ 
;$$ 
Head&& 
=&& 
node&& 
;&& 
}'' 	
public(( 
void(( 
	AddToLast(( 
((( 
Node(( "
node((# '
)((' (
{)) 	
if++ 
(++ 
Head++ 
==++ 
null++ 
)++ 
{,, 
Head-- 
=-- 
node-- 
;-- 
return.. 
;.. 
}// 
var11 
current11 
=11 
Head11 
;11 
while22 
(22 
current22 
.22 
Next22 
!=22  "
null22# '
)22' (
{33 
current44 
=44 
current44 !
.44! "
Next44" &
;44& '
}55 
current66 
.66 
Next66 
=66 
node66 
;66  
}88 	
public:: 
void:: 

AddToIndex:: 
(:: 
Node:: #
node::$ (
,::( )
int::* -
position::. 6
)::6 7
{;; 	
if== 
(== 
Head== 
==== 
null== 
)== 
{>> 
Head?? 
=?? 
node?? 
;?? 
return@@ 
;@@ 
}AA 
varCC 
currentCC 
=CC 
HeadCC 
;CC 
varDD 
indexDD 
=DD 
$numDD 
;DD 
whileEE 
(EE 
indexEE 
!=EE 
positionEE $
)EE$ %
{FF 
currentGG 
=GG 
currentGG !
.GG! "
NextGG" &
;GG& '
indexHH 
++HH 
;HH 
}II 
NodeJJ 
currentNodeJJ 
=JJ 
currentJJ &
;JJ& '
currentKK 
=KK 
nodeKK 
;KK 
currentLL 
.LL 
NextLL 
=LL 
currentNodeLL &
;LL& '
}MM 	
publicNN 
voidNN 
RemoveFirstNN 
(NN  
)NN  !
{OO 	
ifPP 
(PP 
HeadPP 
==PP 
nullPP 
)PP 
{QQ 
returnRR 
;RR 
}SS 
varTT 
currentTT 
=TT 
HeadTT 
;TT 
HeadUU 
=UU 
currentUU 
.UU 
NextUU 
;UU  
}VV 	
publicWW 
voidWW 

removeLastWW 
(WW 
)WW  
{XX 	
ifYY 
(YY 
HeadYY 
==YY 
nullYY 
)YY 
{ZZ 
return[[ 
;[[ 
}\\ 
var]] 
current]] 
=]] 
Head]] 
;]] 
while^^ 
(^^ 
current^^ 
.^^ 
Next^^ 
.^^  
Next^^  $
!=^^% '
null^^( ,
)^^, -
{__ 
current`` 
=`` 
current`` !
.``! "
Next``" &
;``& '
}aa 
currentbb 
.bb 
Nextbb 
=bb 
nullbb 
;bb  
}cc 	
}ee 
}ff ì
6C:\Users\manoj\documents\CSharpLearninProjects\Node.cs
	namespace 	'
DataStructuresAndAlgorithms
 %
{ 
public 

class 
Node 
{ 
public 
int 
Value 
{ 
get 
; 
set  #
;# $
}% &
public 
Node 
? 
Next 
{ 
get 
;  
set! $
;$ %
}& '
public 
Node 
( 
int 
value 
) 
{		 	
Value

 
=

 
value

 
;

 
} 	
} 
} ³
9C:\Users\manoj\documents\CSharpLearninProjects\Program.cs
Console 
. 
	WriteLine 
( 
$str !
)! "
;" #